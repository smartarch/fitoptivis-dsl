grammar cz.cuni.mff.fitoptivis.FitLang with cz.cuni.mff.fitoptivis.FitLangLiterals

generate fitLang "http://www.cuni.cz/mff/fitoptivis/FitLang"

// ***********************
// 	   Entry point
// ***********************

Model:
	elements+=Element*;
			
Element:
	Budget | DataChannel | Component | System;
	
// ***********************
// 	   Interface ports
// ***********************

Budget:
	'budget' name=ID '{' qualityDefinitions+=SingleQualityDef* '}'
;

DataChannel:
	'channel' name=ID '{' qualityDefinitions+=SingleQualityDef* '}'
;

SingleQualityDef:
	'quality' name=ID ';'
;

// ***********************
// 	   	   System
// ***********************

System:
	'system' name=ID '{' ( 
		subComponents += SubComponentPredicate
		| independentPredicates += IndependentPredicate
	)*
	'}'
;

// ***********************
// 	   	  Component
// ***********************

Component:
	'component' name=ID '{' componentRules=ComponentRules '}'
;

ComponentRules:
	Configurations | DefaultConfiguration
;

Configurations:
	configuration += Configuration+
;

DefaultConfiguration returns Configuration:
	{Configuration} configBody = ConfigurationBody
;

Configuration:
	'configuration' name=ID '{' configBody = ConfigurationBody '}'
;

ConfigurationBody:
	{ConfigurationBody} (
		supports += SupportsPredicate 
		| requires += RequiresPredicate 
		| inputs += InputsPredicate 
		| outputs += OutputsPredicate
		| qualities += QualityPredicate		
		| independentPredicates += IndependentPredicate
		| subComponents += SubComponentPredicate
		)*
;

// ***********************
// 	  	Port declarations
// ***********************

SupportsPredicate:
	'supports' environment = [Budget] name=ID array=ArrayIndex? predicates=PredicateBlock? ';'
;

RequiresPredicate:
	'requires' environment = [Budget] name=ID array=ArrayIndex? predicates=PredicateBlock? ';'
;

InputsPredicate:
	'inputs' channel = [DataChannel] name=ID array=ArrayIndex? predicates=PredicateBlock? ';'
;

OutputsPredicate:
	'outputs' channel = [DataChannel] name=ID array=ArrayIndex? predicates=PredicateBlock? ';'
;

// ***********************
// 	   Predicates
// ***********************

PredicateBlock:
	{PredicateBlock}'{' (predicates += Predicate (';' predicates += Predicate)* ';'?)? '}'
;

IndependentPredicate:
	Predicate ';'
;

QualityPredicate:
	QualityDeclaration
;

SubComponentPredicate:
	'component' type=[Component] (name=ID array=ArrayIndex?)? ';'
;

QualityDeclaration:
	'quality' name=ID ('=' expr=(Expression))? ';'
;

Predicate:	
	AndPredicate 
	| OrPredicate
	| QualityExpression
	(
		(({InPredicate.quality=current} 'in' array=(SubExpression | InlineArrayExpression))
			| ({RunsOnPredicate.guest=current} 'runs' 'on' host=QualityExpression)
			| ({OutputsToPredicate.producer=current} 'outputs' 'to' consumer=QualityExpression))
		|
		(
			({MultiplicativeExpression.left=current} op=Multiplicative_Operator right=MultiplicativeExpression)?
			({AdditiveExpression.left=current} op=Additive_Operator right=AdditiveExpression)?
			(
				{BoolExpression.left=current} op=Comparison_Operator right=Expression
				(
		    		({BoolExpression.left=current} op=Logical_Binary_Operator right=BoolExpression)?
		    		({ImplicationPredicate.antecedent = current} '=>' consequent=Predicate)?
		    	)	
		    )	
		)
	)
	| ExpressionNotStartingWithQualityExpression
		({BoolExpression.left=current} op=Comparison_Operator right=Expression)
			({ImplicationPredicate.antecedent = current} '=>' consequent=Predicate)?
			
;

AndPredicate:
	'all' '[' subPredicates += Predicate (',' subPredicates += Predicate)* ','? ']'
;

OrPredicate:
	'any' '[' subPredicates += Predicate(',' subPredicates += Predicate)* ','? ']'
;

// ***********************
// 	   Expressions
// ***********************

BoolExpression:
	ComparisonExpression 
		({BoolExpression.left=current} op=Logical_Binary_Operator right=ComparisonExpression)*
;

ComparisonExpression:
	left=Expression operator=Comparison_Operator right=Expression
;

Expression:
	SubExpression  
	| InlineArrayExpression 
	| InlineObjectExpression
;

ExpressionNotStartingWithQualityExpression returns Expression:
	SubExpressionNotStartingWithQualityExpression 
	| InlineArrayExpression 
	| InlineObjectExpression
;

SubExpression:
	AdditiveExpression
;

SubExpressionNotStartingWithQualityExpression returns Expression:
	AdditiveExpressionNotStartingWithQualityExpression
;

AdditiveExpression:
	MultiplicativeExpression 
		({AdditiveExpression.left=current} op=Additive_Operator right=MultiplicativeExpression)*
;

AdditiveExpressionNotStartingWithQualityExpression returns Expression:
	MultiplicativeExpressionNotStartingWithQualityExpression 
	  ({AdditiveExpression.left=current} op=Additive_Operator right=MultiplicativeExpression)*
;

MultiplicativeExpression:
	Term 
		({MultiplicativeExpression.left=current} op=Multiplicative_Operator right=Term)*
;

MultiplicativeExpressionNotStartingWithQualityExpression returns Expression:
	NonQualityExpressionTerm 
		({MultiplicativeExpression.left=current} op=Multiplicative_Operator right=Term)*
;

Term:
	BracketedExpression 
	| UnaryExpression 
	| QualityExpression 
	| Literal 
	| CallExpression
;

NonQualityExpressionTerm:
	BracketedExpression 
	| UnaryExpression 
	| Literal 
	| CallExpression
;

CallExpression:
	functionCall=ID '(' (params+=Expression (',' params+=Expression)*)? ')'
;

InlineArrayExpression: 
	'[' items+=Expression (',' items+=Expression)* ','? ']'
;

InlineObjectExpression:
	'{' properties+=PropertyDeclaration (',' properties+=PropertyDeclaration)* ','? '}'
;

PropertyDeclaration:
	name=ID ':' value=Expression
;

BracketedExpression:
	'(' expr = SubExpression ')'
;

UnaryExpression:
	op=Unary_Operator expr=Term
;

QualityExpression:
	qualityName=ID (
		({PropertyAccessExpression.object=current} '.' propertyName=ID)
		|
		({ArrayAccessExpression.array=current} index=ArrayIndex)
	)*
;

ArrayIndex:
	'[' (arrayExpr=SubExpression | anyIndex?='...')']'
;

Literal:
	IntLiteral | StringLiteral
;

IntLiteral:
	value = INT
;

StringLiteral:
	text = STRING
;
